set(GOPATH "${CMAKE_CURRENT_BINARY_DIR}/go")
file(MAKE_DIRECTORY ${GOPATH})

# os
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
  SET(OS_LINUX ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
  SET(OS_MACOSX ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  SET(OS_WINDOWS ON)
  SET(OS_WIN ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "MSYS")
  SET(OS_WINDOWS ON)
  SET(OS_WIN ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
  SET(OS_FREEBSD ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Android")
  SET(OS_ANDROID ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "BlackBerry")
  SET(OS_BLACKBERRY ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "iOS")
  SET(OS_IOS ON)
  SET(OS_POSIX ON)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "WindowsPhone")
  SET(OS_WINPHONE ON)
ELSE()
  MESSAGE(FATAL_ERROR "Not supported OS: ${CMAKE_SYSTEM_NAME}")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")

# platform
# PLATFORM_ARCH_NAME (human readable)
# PLATFORM_ARCH_FULL_NAME (human readable package name)
# PLATFORM_PACKAGE_ARCH_NAME (deb -s) package specific
STRING(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} CMAKE_SYSTEM_PROCESSOR_LOWERCASE)
IF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "arm" OR CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")
  SET(PLATFORM_ARM ON)
  IF(OS_ANDROID)
    SET(PLATFORM_ARCH_NAME ${ANDROID_NDK_ABI_NAME})
    SET(PLATFORM_ARCH_FULL_NAME ${CMAKE_SYSTEM_PROCESSOR_LOWERCASE})
    SET(PLATFORM_PACKAGE_ARCH_NAME ${ANDROID_NDK_ABI_NAME})
  ELSEIF(OS_IOS)
    SET(PLATFORM_ARCH_NAME ${CMAKE_SYSTEM_PROCESSOR_LOWERCASE})
    SET(PLATFORM_ARCH_FULL_NAME ${CMAKE_SYSTEM_PROCESSOR_LOWERCASE})
    SET(PLATFORM_PACKAGE_ARCH_NAME ${CMAKE_SYSTEM_PROCESSOR_LOWERCASE})
  ELSE(OS_ANDROID)
    IF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")
      SET(PLATFORM_ARCH_NAME "arm64")
      SET(PLATFORM_ARCH_FULL_NAME "arm64")
      SET(PLATFORM_PACKAGE_ARCH_NAME "arm64")
    ELSE(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")
      SET(PLATFORM_ARCH_NAME "arm")
      SET(PLATFORM_ARCH_FULL_NAME "armhf")
      SET(PLATFORM_PACKAGE_ARCH_NAME "armhf")
    ENDIF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")
  ENDIF(OS_ANDROID)
ELSEIF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "amd64")
  #IF(CMAKE_SIZEOF_VOID_P MATCHES 8)
    SET(PLATFORM_X86_64 ON)
    SET(PLATFORM_ARCH_NAME "x86_64")
    SET(PLATFORM_ARCH_FULL_NAME "x86_64")
    SET(PLATFORM_PACKAGE_ARCH_NAME "amd64")
  #ELSEIF(CMAKE_SIZEOF_VOID_P MATCHES 4)
  #  SET(PLATFORM_I386 ON)
  #  SET(PLATFORM_ARCH_NAME "i386")
  #  SET(PLATFORM_ARCH_FULL_NAME "i386")
  #  SET(PLATFORM_PACKAGE_ARCH_NAME "i386")
  #ELSE()
  #  MESSAGE(FATAL_ERROR "Not handled void pinter size: ${CMAKE_SIZEOF_VOID_P}")
  #ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 8)
ELSEIF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "i686")
  SET(PLATFORM_I386 ON)
  SET(PLATFORM_ARCH_NAME "i386")
  SET(PLATFORM_ARCH_FULL_NAME "i386")
  SET(PLATFORM_PACKAGE_ARCH_NAME "i386")
ELSE(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "arm" OR CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")
  MESSAGE(FATAL_ERROR "Not supported platform: ${CMAKE_SYSTEM_PROCESSOR}")
ENDIF(CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "arm" OR CMAKE_SYSTEM_PROCESSOR_LOWERCASE MATCHES "aarch64")

IF(OS_MACOSX)
  IF(PLATFORM_X86_64)
    SET(CMAKE_OSX_ARCHITECTURES x86_64)
  ELSEIF(PLATFORM_I386)
    SET(CMAKE_OSX_ARCHITECTURES i386)
  ELSE(OS_MACOSX)
    MESSAGE(FATAL_ERROR "Unknown platform: ${PLATFORM_ARCH_NAME}")
  ENDIF(PLATFORM_X86_64)
ENDIF(OS_MACOSX)

MESSAGE(STATUS "CMAKE_SYSTEM_NAME:" ${CMAKE_SYSTEM_NAME})
MESSAGE(STATUS "PLATFORM_ARCH_NAME:" ${PLATFORM_ARCH_NAME})
MESSAGE(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}") # cross compiling
MESSAGE(STATUS "CMAKE_SYSTEM: ${CMAKE_SYSTEM}")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/")

SET(RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/build/bin)
SET(LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/build/lib)

# Output directory in which to build RUNTIME target files.
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY})
# Output directory in which to build LIBRARY target files
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_DIRECTORY})
# Output directory in which to build ARCHIVE target files.
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_DIRECTORY})

function(add_go_executable NAME)
  file(GLOB GO_SOURCE RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.go")
  add_custom_target(init ALL
    COMMAND env GOPATH=${GOPATH} ${CMAKE_GO_COMPILER} mod tidy
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
  add_custom_command(OUTPUT ${OUTPUT_DIR}/.timestamp 
    COMMAND env GOPATH=${GOPATH} ${CMAKE_GO_COMPILER} build
    -o "${CMAKE_CURRENT_BINARY_DIR}/${NAME}"
    ${CMAKE_GO_FLAGS} ${GO_SOURCE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})

  add_custom_target(${NAME} ALL DEPENDS init ${OUTPUT_DIR}/.timestamp ${ARGN})
endfunction(add_go_executable)

INCLUDE(../projecthelper)
PROJECT_GET_GIT_VERSION(PROJECT_VERSION_GIT)
MATH(EXPR PROJECT_VERSION_NUMBER "(${PROJECT_VERSION_MAJOR}<<24)|(${PROJECT_VERSION_MINOR}<<16)|(${PROJECT_VERSION_PATCH}<<8)|(${PROJECT_VERSION_TWEAK})")
